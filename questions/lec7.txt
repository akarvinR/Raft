On Monday, we will continue the discussion on distributed consensus. Please read again the Raft paper and submit your answer to the 
questions below by Monday at 10am. See @12 for instructions on how to submit.

Consider a fault-tolerant key-value store that is backed by a Raft service. The store supports two operations:


- A put(key, value) that inserts a new key-value pair in the store (or sets the value of the key if it already exists), and

- A get(key) that returns the value of the given key.


Every time a new request comes in, the key-value store executes the request (and replies to the client) only after the request is marked as
committed by the Raft leader.

---------------------------------------------------------------------------------------------------------------------------------------------------------
Question 1:  Is it possible that clients observe an old value for a key? Explain why or why not.


Answer: No, clients will not return old value because leader has all committed entries (Leader Completeness property). 
When a client does a put operation, the leader ensures the operation is replicated in majority of the servers before committing. 
Even in case of leader/follower failure, the state stays consistent.
		
When a client sends a get request, it gets a reply only after leader commits it (gets replicated in majority of the servers),
hence the client never reads a stale reply.


---------------------------------------------------------------------------------------------------------------------------------------------------------
Question 2: To further improve the key-value store performance, a colleague suggests that you modify the implementation to serve get requests by simply 
doing a look up in the leader's log 
and without executing the consensus protocol. Would this affect Raft's consistency guarantees and, if so, how? 


Answer: Yes, it will not be consistent. If a leader S1 in term T maintains a log with a put command that has not been committed,
 and serves “Get” request, then crashes, and a leader S5 is elected in term U, the next get request will not see the same data, 
 since it has not been recorded in database. (Reference: Section 5.4.1 in Raft Paper)
